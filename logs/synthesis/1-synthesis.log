
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/i_tree/src/InputBuffer.v
Parsing SystemVerilog input from `/openlane/designs/i_tree/src/InputBuffer.v' to AST representation.
Generating RTLIL representation for module `\InputBuffer'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /openlane/designs/i_tree/src/i_tree.v
Parsing SystemVerilog input from `/openlane/designs/i_tree/src/i_tree.v' to AST representation.
Generating RTLIL representation for module `\i_tree'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/i_tree/src/IsolationTreeStateMachine.v
Parsing SystemVerilog input from `/openlane/designs/i_tree/src/IsolationTreeStateMachine.v' to AST representation.
Generating RTLIL representation for module `\IsolationTreeStateMachine'.
Successfully finished Verilog frontend.

4. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/i_tree/runs/RUN_2024.04.17_14.14.50/tmp/synthesis/hierarchy.dot'.
Dumping module i_tree to page 1.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \i_tree
Used module:     \IsolationTreeStateMachine
Used module:     \InputBuffer
Parameter \DATA_WIDTH = 8

5.2. Executing AST frontend in derive mode using pre-parsed AST for module `\InputBuffer'.
Parameter \DATA_WIDTH = 8
Generating RTLIL representation for module `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000'.

5.3. Analyzing design hierarchy..
Top module:  \i_tree
Used module:     \IsolationTreeStateMachine
Used module:     $paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000

5.4. Analyzing design hierarchy..
Top module:  \i_tree
Used module:     \IsolationTreeStateMachine
Used module:     $paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000
Removing unused module `\InputBuffer'.
Removed 1 unused modules.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \i_tree
Used module:     \IsolationTreeStateMachine
Used module:     $paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000

7.2. Analyzing design hierarchy..
Top module:  \i_tree
Used module:     \IsolationTreeStateMachine
Used module:     $paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:20$9 in module IsolationTreeStateMachine.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/i_tree/src/InputBuffer.v:18$14 in module $paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 3 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:17$13'.
  Set init value: \next_state = 2'00
Found init rule in `\IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:16$12'.
  Set init value: \current_state = 2'00
Found init rule in `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.$proc$/openlane/designs/i_tree/src/InputBuffer.v:15$21'.
  Set init value: \bit_count = 8'00000000

12. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:20$9'.
Found async reset \reset in `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.$proc$/openlane/designs/i_tree/src/InputBuffer.v:18$14'.

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~5 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:17$13'.
Creating decoders for process `\IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:16$12'.
Creating decoders for process `\IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:20$9'.
     1/5: $0\current_state[1:0]
     2/5: $0\anomaly_pattern[7:0]
     3/5: $0\next_state[1:0]
     4/5: $0\anomaly_detected[0:0]
     5/5: $0\data_processed[0:0]
Creating decoders for process `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.$proc$/openlane/designs/i_tree/src/InputBuffer.v:15$21'.
Creating decoders for process `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.$proc$/openlane/designs/i_tree/src/InputBuffer.v:18$14'.
     1/5: $0\bit_count[7:0]
     2/5: $0\data_temp[7:0]
     3/5: $0\buffer[7:0]
     4/5: $0\data_ready[0:0]
     5/5: $0\data_output[7:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\IsolationTreeStateMachine.\data_processed' using process `\IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:20$9'.
  created $adff cell `$procdff$60' with positive edge clock and negative level reset.
Creating register for signal `\IsolationTreeStateMachine.\anomaly_detected' using process `\IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:20$9'.
  created $adff cell `$procdff$61' with positive edge clock and negative level reset.
Creating register for signal `\IsolationTreeStateMachine.\current_state' using process `\IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:20$9'.
  created $adff cell `$procdff$62' with positive edge clock and negative level reset.
Creating register for signal `\IsolationTreeStateMachine.\next_state' using process `\IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:20$9'.
  created $adff cell `$procdff$63' with positive edge clock and negative level reset.
Creating register for signal `\IsolationTreeStateMachine.\anomaly_pattern' using process `\IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:20$9'.
  created $adff cell `$procdff$64' with positive edge clock and negative level reset.
Creating register for signal `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.\data_output' using process `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.$proc$/openlane/designs/i_tree/src/InputBuffer.v:18$14'.
  created $adff cell `$procdff$65' with positive edge clock and positive level reset.
Creating register for signal `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.\data_ready' using process `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.$proc$/openlane/designs/i_tree/src/InputBuffer.v:18$14'.
  created $adff cell `$procdff$66' with positive edge clock and positive level reset.
Creating register for signal `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.\buffer' using process `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.$proc$/openlane/designs/i_tree/src/InputBuffer.v:18$14'.
  created $adff cell `$procdff$67' with positive edge clock and positive level reset.
Creating register for signal `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.\data_temp' using process `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.$proc$/openlane/designs/i_tree/src/InputBuffer.v:18$14'.
  created $adff cell `$procdff$68' with positive edge clock and positive level reset.
Creating register for signal `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.\bit_count' using process `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.$proc$/openlane/designs/i_tree/src/InputBuffer.v:18$14'.
  created $adff cell `$procdff$69' with positive edge clock and positive level reset.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:17$13'.
Removing empty process `IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:16$12'.
Found and cleaned up 2 empty switches in `\IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:20$9'.
Removing empty process `IsolationTreeStateMachine.$proc$/openlane/designs/i_tree/src/IsolationTreeStateMachine.v:20$9'.
Removing empty process `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.$proc$/openlane/designs/i_tree/src/InputBuffer.v:15$21'.
Found and cleaned up 3 empty switches in `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.$proc$/openlane/designs/i_tree/src/InputBuffer.v:18$14'.
Removing empty process `$paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.$proc$/openlane/designs/i_tree/src/InputBuffer.v:18$14'.
Cleaned up 5 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module IsolationTreeStateMachine...
Checking module i_tree...
Checking module $paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module IsolationTreeStateMachine.
<suppressed ~3 debug messages>
Optimizing module i_tree.
Optimizing module $paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.
<suppressed ~1 debug messages>

21. Executing FLATTEN pass (flatten design).
Deleting now unused module IsolationTreeStateMachine.
Deleting now unused module $paramod\InputBuffer\DATA_WIDTH=s32'00000000000000000000000000001000.
<suppressed ~2 debug messages>

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..
Removed 1 unused cells and 25 unused wires.
<suppressed ~2 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i_tree..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\input_buffer_inst.$procmux$54: \input_buffer_inst.data_ready -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i_tree.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i_tree..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i_tree.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking i_tree.isolation_tree_state_machine_inst.next_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i_tree..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i_tree.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\isolation_tree_state_machine_inst.$procdff$64 ($adff) from module i_tree (D = \input_buffer_inst.data_output, Q = \isolation_tree_state_machine_inst.anomaly_pattern).
Adding EN signal on $flatten\isolation_tree_state_machine_inst.$procdff$63 ($adff) from module i_tree (D = $flatten\isolation_tree_state_machine_inst.$0\next_state[1:0], Q = \isolation_tree_state_machine_inst.next_state).
Adding EN signal on $flatten\isolation_tree_state_machine_inst.$procdff$61 ($adff) from module i_tree (D = $flatten\isolation_tree_state_machine_inst.$0\anomaly_detected[0:0], Q = \isolation_tree_state_machine_inst.anomaly_detected).
Adding EN signal on $flatten\isolation_tree_state_machine_inst.$procdff$60 ($adff) from module i_tree (D = 1'1, Q = \isolation_tree_state_machine_inst.data_processed).
Adding EN signal on $flatten\input_buffer_inst.$procdff$69 ($adff) from module i_tree (D = $flatten\input_buffer_inst.$0\bit_count[7:0], Q = \input_buffer_inst.bit_count).
Adding EN signal on $flatten\input_buffer_inst.$procdff$68 ($adff) from module i_tree (D = \input_buffer_inst.buffer, Q = \input_buffer_inst.data_temp).
Adding EN signal on $flatten\input_buffer_inst.$procdff$67 ($adff) from module i_tree (D = $flatten\input_buffer_inst.$0\buffer[7:0], Q = \input_buffer_inst.buffer).
Adding EN signal on $flatten\input_buffer_inst.$procdff$65 ($adff) from module i_tree (D = \input_buffer_inst.data_temp, Q = \input_buffer_inst.data_output).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.
<suppressed ~3 debug messages>

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i_tree..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i_tree.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

26.16. Rerunning OPT passes. (Maybe there is more to do..)

26.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i_tree..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

26.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i_tree.
Performed a total of 0 changes.

26.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

26.20. Executing OPT_DFF pass (perform DFF optimizations).

26.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..

26.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

26.23. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 8) from port B of cell i_tree.$flatten\input_buffer_inst.$eq$/openlane/designs/i_tree/src/InputBuffer.v:34$19 ($eq).
Removed top 31 bits (of 32) from port B of cell i_tree.$flatten\input_buffer_inst.$add$/openlane/designs/i_tree/src/InputBuffer.v:30$18 ($add).
Removed top 24 bits (of 32) from port Y of cell i_tree.$flatten\input_buffer_inst.$add$/openlane/designs/i_tree/src/InputBuffer.v:30$18 ($add).
Removed top 28 bits (of 32) from port B of cell i_tree.$flatten\input_buffer_inst.$lt$/openlane/designs/i_tree/src/InputBuffer.v:28$15 ($lt).
Removed top 1 bits (of 2) from port B of cell i_tree.$flatten\isolation_tree_state_machine_inst.$procmux$32_CMP0 ($eq).
Removed top 24 bits (of 32) from wire i_tree.$flatten\input_buffer_inst.$add$/openlane/designs/i_tree/src/InputBuffer.v:30$18_Y.

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module i_tree:
  creating $macc model for $flatten\input_buffer_inst.$add$/openlane/designs/i_tree/src/InputBuffer.v:30$18 ($add).
  creating $alu model for $macc $flatten\input_buffer_inst.$add$/openlane/designs/i_tree/src/InputBuffer.v:30$18.
  creating $alu model for $flatten\input_buffer_inst.$lt$/openlane/designs/i_tree/src/InputBuffer.v:28$15 ($lt): new $alu
  creating $alu model for $flatten\input_buffer_inst.$eq$/openlane/designs/i_tree/src/InputBuffer.v:34$19 ($eq): merged with $flatten\input_buffer_inst.$lt$/openlane/designs/i_tree/src/InputBuffer.v:28$15.
  creating $alu cell for $flatten\input_buffer_inst.$lt$/openlane/designs/i_tree/src/InputBuffer.v:28$15, $flatten\input_buffer_inst.$eq$/openlane/designs/i_tree/src/InputBuffer.v:34$19: $auto$alumacc.cc:485:replace_alu$90
  creating $alu cell for $flatten\input_buffer_inst.$add$/openlane/designs/i_tree/src/InputBuffer.v:30$18: $auto$alumacc.cc:485:replace_alu$101
  created 2 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.
<suppressed ~2 debug messages>

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i_tree..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i_tree.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

32.9. Rerunning OPT passes. (Maybe there is more to do..)

32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i_tree..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i_tree.
Performed a total of 0 changes.

32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

32.13. Executing OPT_DFF pass (perform DFF optimizations).

32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..

32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

32.16. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.
<suppressed ~6 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i_tree..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i_tree.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

37.10. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using template $paramod$b9513f2555ba02118b069422fea717af39120cf7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$521ce43182eecb9f60c72393a788160d2c356bf5\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $reduce_or.
No more expansions possible.
<suppressed ~346 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.
<suppressed ~109 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..
Removed 15 unused cells and 124 unused wires.
<suppressed ~16 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\i_tree' to `<abc-temp-dir>/input.blif'..
Extracted 83 gates and 120 wires to a netlist network with 36 inputs and 26 outputs.

40.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:              NAND cells:        3
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               XOR cells:       14
ABC RESULTS:                OR cells:       15
ABC RESULTS:            ANDNOT cells:       25
ABC RESULTS:        internal signals:       58
ABC RESULTS:           input signals:       36
ABC RESULTS:          output signals:       26
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..
Removed 0 unused cells and 72 unused wires.
<suppressed ~1 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \i_tree

42.2. Analyzing design hierarchy..
Top module:  \i_tree
Removed 0 unused modules.

43. Printing statistics.

=== i_tree ===

   Number of wires:                 93
   Number of wire bits:            145
   Number of public wires:          25
   Number of public wire bits:      76
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                116
     $_ANDNOT_                      24
     $_AND_                          1
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                   11
     $_DFFE_PP0P_                   32
     $_DFF_PN0_                      2
     $_DFF_PP0_                      1
     $_NAND_                         3
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                        6
     $_OR_                          15
     $_XNOR_                         1
     $_XOR_                         14

44. Executing CHECK pass (checking for obvious problems).
Checking module i_tree...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/i_tree/runs/RUN_2024.04.17_14.14.50/tmp/synthesis/post_techmap.dot'.
Dumping module i_tree to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i_tree..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i_tree.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i_tree'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i_tree.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..
Removed 0 unused cells and 12 unused wires.
<suppressed ~12 debug messages>

49. Printing statistics.

=== i_tree ===

   Number of wires:                 81
   Number of wire bits:            119
   Number of public wires:          13
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                116
     $_ANDNOT_                      24
     $_AND_                          1
     $_DFFE_PN0N_                    1
     $_DFFE_PN0P_                   11
     $_DFFE_PP0P_                   32
     $_DFF_PN0_                      2
     $_DFF_PP0_                      1
     $_NAND_                         3
     $_NOR_                          3
     $_NOT_                          2
     $_ORNOT_                        6
     $_OR_                          15
     $_XNOR_                         1
     $_XOR_                         14

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/zerotoasic/asic_tools/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/zerotoasic/asic_tools/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/zerotoasic/asic_tools/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/zerotoasic/asic_tools/pdk/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\i_tree':
  mapped 47 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.

55. Printing statistics.

=== i_tree ===

   Number of wires:                158
   Number of wire bits:            196
   Number of public wires:          13
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                193
     $_ANDNOT_                      24
     $_AND_                          1
     $_MUX_                         44
     $_NAND_                         3
     $_NOR_                          3
     $_NOT_                         35
     $_ORNOT_                        6
     $_OR_                          15
     $_XNOR_                         1
     $_XOR_                         14
     sky130_fd_sc_hd__dfrtp_2       47

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\i_tree' to `/tmp/yosys-abc-jYqmOO/input.blif'..
Extracted 146 gates and 196 wires to a netlist network with 49 inputs and 78 outputs.

56.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-jYqmOO/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-jYqmOO/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-jYqmOO/input.blif 
ABC: + read_lib -w /openlane/designs/i_tree/runs/RUN_2024.04.17_14.14.50/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/i_tree/runs/RUN_2024.04.17_14.14.50/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.07 sec
ABC: Memory =    9.54 MB. Time =     0.07 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/i_tree/runs/RUN_2024.04.17_14.14.50/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/i_tree/runs/RUN_2024.04.17_14.14.50/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (1838.63 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    144 ( 51.4 %)   Cap = 17.9 ff (  9.5 %)   Area =      989.70 ( 48.6 %)   Delay =  2144.21 ps  ( 13.2 %)               
ABC: Path  0 --       1 : 0    2 pi                      A =   0.00  Df =  10.9   -6.6 ps  S =  21.3 ps  Cin =  0.0 ff  Cout =   3.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     137 : 4    4 sky130_fd_sc_hd__or4_2  A =   8.76  Df = 713.6 -566.3 ps  S = 140.6 ps  Cin =  1.5 ff  Cout =  13.4 ff  Cmax = 310.4 ff  G =  846  
ABC: Path  2 --     151 : 4    1 sky130_fd_sc_hd__or4b_2 A =  10.01  Df =1359.1-1097.2 ps  S =  94.6 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 265.5 ff  G =  143  
ABC: Path  3 --     152 : 1    9 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1580.2-1015.6 ps  S = 374.4 ps  Cin =  2.1 ff  Cout =  31.6 ff  Cmax = 130.0 ff  G = 1434  
ABC: Path  4 --     153 : 3    1 sky130_fd_sc_hd__mux2_2 A =  11.26  Df =1925.3-1030.4 ps  S =  45.6 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path  5 --     154 : 1    1 sky130_fd_sc_hd__buf_1  A =   3.75  Df =2144.2 -928.6 ps  S = 396.4 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi0 (\input_buffer_inst.bit_count [7]).  End-point = po8 ($auto$rtlil.cc:2607:MuxGate$725).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   49/   78  lat =    0  nd =   144  edge =    290  area =989.49  delay = 5.00  lev = 5
ABC: + write_blif /tmp/yosys-abc-jYqmOO/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       39
ABC RESULTS:        internal signals:       69
ABC RESULTS:           input signals:       49
ABC RESULTS:          output signals:       78
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i_tree..
Removed 0 unused cells and 195 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module i_tree...
Warning: Wire i_tree.\anomaly_detected is used but has no driver.
Found and reported 1 problems.

63. Printing statistics.

=== i_tree ===

   Number of wires:                194
   Number of wire bits:            194
   Number of public wires:          50
   Number of public wire bits:      50
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                191
     sky130_fd_sc_hd__a2111oi_2      1
     sky130_fd_sc_hd__a21o_2         1
     sky130_fd_sc_hd__a21oi_2        2
     sky130_fd_sc_hd__a22o_2         8
     sky130_fd_sc_hd__a22oi_2        1
     sky130_fd_sc_hd__a31o_2         2
     sky130_fd_sc_hd__a32o_2         1
     sky130_fd_sc_hd__and2_2         6
     sky130_fd_sc_hd__buf_1         35
     sky130_fd_sc_hd__dfrtp_2       47
     sky130_fd_sc_hd__inv_2         39
     sky130_fd_sc_hd__mux2_2        24
     sky130_fd_sc_hd__nand2_2        1
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nor2_2         6
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__o2111a_2       1
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o21a_2         1
     sky130_fd_sc_hd__o21ba_2        1
     sky130_fd_sc_hd__o221a_2        1
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__or2_2          1
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__or4_2          1
     sky130_fd_sc_hd__or4b_2         1
     sky130_fd_sc_hd__xnor2_2        2
     sky130_fd_sc_hd__xor2_2         2

   Chip area for module '\i_tree': 2224.633600

64. Executing Verilog backend.
Dumping module `\i_tree'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 38205a97ef, CPU: user 0.45s system 0.03s, MEM: 28.88 MB peak
Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)
Time spent: 41% 2x abc (0 sec), 14% 4x stat (0 sec), ...
